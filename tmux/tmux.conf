# Plugins
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'
set -g @plugin 'omerxx/tmux-sessionx'
set -g @plugin 'omerxx/catppuccin-tmux'

# Settings
set -g mouse on               # enable mouse support
set -g prefix M-d
set -g prefix2 M-d            # GNU-Screen compatible prefix
set -s escape-time 0          # faster command sequences
set -s focus-events on
set -sg repeat-time 600       # increase repeat timeout
set -g history-limit 1000000  # boost history
set -g default-terminal "${TERM}"

# Display
# set -g status-position # macOS / darwin style
set -g base-index 1           # start windows numbering at 1
set -g pane-base-index 1     # make pane numbering consistent with windows
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time
set -g status-interval 5      # redraw status line every 10 seconds
set -g monitor-activity on
set -g visual-activity on
set -g set-clipboard on       # use system clipboard
set -g detach-on-destroy off  # don't exit from tmux when closing a session
set -g pane-active-border-style 'fg=magenta,bg=#252934'
set -g pane-border-style 'fg=brightblack,bg=#252934'


# -- Bindkeys ----------------------------------------------------------------
unbind -a

bind ^X lock-server
bind ^C new-window -c "$HOME"
bind ^D detach

bind c new-window -c "#{pane_current_path}"
bind h previous-window
# bind l next-window
bind n previous-window
bind m next-window

bind k split-window -v -c "#{pane_current_path}"
bind j split-window -h -c "#{pane_current_path}"

bind ç join-pane -s :. -t :1 -v
bind q break-pane
bind l resize-pane -Z

bind x kill-pane
bind > swap-pane -D
bind < swap-pane -U

bind : command-prompt
bind * setw synchronize-panes
bind g choose-session

bind -r H resize-pane -L 3
bind -r J resize-pane -D 3
bind -r K resize-pane -U 3
bind -r L resize-pane -R 3

bind -r P resize-pane -R 15

bind '"' choose-window

bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9

# Copy mode
bind o copy-mode
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi f send -X start-of-line
bind -T copy-mode-vi q send -X cancel
bind -T copy-mode-vi M-q send -X cancel
bind -T copy-mode-vi m send -X next-word-end
bind -T copy-mode-vi n send -X previous-word
bind -T copy-mode-vi w send -X scroll-up
bind -T copy-mode-vi e send -X scroll-down
bind -T copy-mode-vi M-k send -X scroll-up
bind -T copy-mode-vi M-j send -X scroll-down
bind -T copy-mode-vi M-e send -X page-down
bind -T copy-mode-vi M-w send -X page-up

# Power Zoom
set -g @power_zoom_trigger 'd'

# Catppuccin Theme
set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " "
set -g @catppuccin_window_number_position "left"

set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"

set -g @catppuccin_window_current_fill "all"
set -g @catppuccin_window_current_text "#W#{?window_zoomed_flag,(),}"

set -g @catppuccin_status_modules_right "directory date_time meetings"
set -g @catppuccin_status_modules_left "session"
set -g @catppuccin_status_left_separator  " "
set -g @catppuccin_status_right_separator " "
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"

set -g @catppuccin_directory_text "#{b:pane_current_path}"
set -g @catppuccin_meetings_text "#($HOME/.config/tmux/scripts/cal.sh)"
set -g @catppuccin_date_time_text "%H:%M"

# Sessionx
set -g @sessionx-bind 's'
set -g @sessionx-window-mode 'off'
set -g @sessionx-window-height '80%'
set -g @sessionx-window-width '80%'
set -g @sessionx-zoxide-mode 'on'
set -g @sessionx-preview-location 'right'
set -g @sessionx-preview-ratio '50%'

set -g @sessionx-bind-accept 'alt-j'

set -g @sessionx-bind-window-mode 'alt-s'
set -g @sessionx-bind-tree-mode 'alt-w'
set -g @sessionx-bind-new-window 'alt-c'

set -g @sessionx-bind-kill-session 'alt-x'
set -g @sessionx-bind-configuration-path 'alt-e'
set -g @sessionx-bind-back 'alt-h'
set -g @sessionx-bind-exit 'alt-q'
set -g @sessionx-bind-scroll-up 'alt-m'
set -g @sessionx-bind-scroll-down 'alt-n'

set -g @sessionx-bind-select-up 'alt-l'
set -g @sessionx-bind-select-down 'alt-k'

set -g @sessionx-bind-delete-char 'alt-p'
set -g @sessionx-bind-abort 'alt-q'

set -g @sessionx-layout 'reverse'
set -g @sessionx-prompt ""
set -g @sessionx-pointer "▶"

# Update Plugins
bind U run "cut -c3- '#{TMUX_CONF}' | sh -s _urlview '#{pane_id}'"

# Reload configuration
bind r run '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"

# -- EOF ----------------------------------------------------------------

# TMUX socket to reload
%if #{==:#{TMUX_PROGRAM},}
  run 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif
%if #{==:#{TMUX_SOCKET},}
  run '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif
%if #{==:#{TMUX_CONF},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
%endif
%if #{==:#{TMUX_CONF_LOCAL},}
  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF_LOCAL "$TMUX_CONF.local"'
%endif

run '"$TMUX_PROGRAM" source "$TMUX_CONF_LOCAL"'
run 'cut -c3- "$TMUX_CONF" | sh -s _apply_configuration'


# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -U'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -D'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -L'
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\'  'select-pane -u'"


# run-shell ~/clone/path/resurrect.tmux
run '~/.tmux/plugins/tpm/tpm'
